generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alembicVersion {
  versionNum String @id(map: "alembic_version_pkc") @map("version_num") @db.VarChar(32)

  @@map("alembic_version")
}

model assistantCollections {
  assistantId  Int         @map("assistant_id")
  collectionId Int         @map("collection_id")
  assistant    assistants  @relation(fields: [assistantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  collection   collections @relation(fields: [collectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([assistantId, collectionId])
  @@index([assistantId], map: "ix_assistant_collections_assistant_id")
  @@index([collectionId], map: "ix_assistant_collections_collection_id")
  @@map("assistant_collections")
}

model assistants {
  id                   Int                    @id @default(autoincrement())
  slug                 String                 @unique @db.VarChar
  name                 String                 @db.VarChar
  description          String                 @db.VarChar
  theme                String                 @db.VarChar
  instructions         String?                @db.VarChar
  assistantCollections assistantCollections[]
  chats                chats[]
  defaultQuestions     defaultQuestions[]
  evaluations          evaluations[]
}

model chats {
  id            String     @id @db.VarChar
  title         String     @db.VarChar
  messages      Json       @db.Json
  assistantSlug String     @map("assistant_slug")
  llmModel      String     @map("llm_model")
  userId        Int        @map("user_id")
  timestamp     DateTime   @db.Timestamp(6)
  shareId       String?    @map("share_id") @db.VarChar
  active        Boolean
  meta          Json?      @db.Json
  group         String     @db.VarChar
  assistant     assistants @relation(fields: [assistantSlug], references: [slug], onDelete: NoAction, onUpdate: NoAction)
  user          users      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id, active], map: "idx_id_active")
  @@index([userId, active, timestamp], map: "idx_userid_active_timestamp")
  @@index([group], map: "idx_group")
}

model collections {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique @db.VarChar
  createdDate          DateTime               @map("created_date") @db.Timestamp(6)
  active               Boolean
  requiresSync         Boolean                @map("requires_sync")
  assistantCollections assistantCollections[]
  collectionsSources   collectionsSources[]
}

model collectionsSources {
  collectionId Int         @map("collection_id")
  sourceId     Int         @map("source_id")
  collection   collections @relation(fields: [collectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  source       sources     @relation(fields: [sourceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([collectionId, sourceId])
  @@index([collectionId], map: "ix_collections_sources_collection_id")
  @@index([sourceId], map: "ix_collections_sources_source_id")
  @@map("collections_sources")
}

model defaultQuestions {
  id            Int        @id @default(autoincrement())
  assistantSlug String     @map("assistant_slug") @db.VarChar
  question      String     @db.VarChar
  assistant     assistants @relation(fields: [assistantSlug], references: [slug], onDelete: NoAction, onUpdate: NoAction)

  @@map("default_questions")
}

model documentChunks {
  id         Int                   @id @default(autoincrement())
  documentId Int                   @map("document_id")
  chunkIndex Int                   @map("chunk_index")
  chunkText  String                @map("chunk_text")
  embedding  Unsupported("vector")
  meta       Json?                 @db.Json
  document   documents             @relation(fields: [documentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([embedding])
  @@map("document_chunks")
}

model documentContents {
  documentId Int       @id @map("document_id")
  content    String
  document   documents @relation(fields: [documentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("document_contents")
}

model documents {
  id               Int               @id @default(autoincrement())
  title            String            @db.VarChar
  url              String?           @db.VarChar
  meta             Json?             @db.Json
  sourceId         Int               @map("source_id")
  lastUpdated      DateTime?         @map("last_updated") @db.Timestamp(6)
  documentChunks   documentChunks[]
  documentContents documentContents?
  source           sources           @relation(fields: [sourceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([url], map: "ix_documents_url")
}

model evaluations {
  id                Int                 @id @default(autoincrement())
  assistantId       Int                 @map("assistant_id")
  pipelineVersion   String              @map("pipeline_version") @db.VarChar
  comments          String?             @db.VarChar
  runDate           DateTime            @map("run_date") @db.Timestamp(6)
  overallScore      Float               @map("overall_score")
  assistant         assistants          @relation(fields: [assistantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  promptEvaluations promptEvaluations[]
}

model indexAttempts {
  id             Int       @id @default(autoincrement())
  status         String    @db.VarChar(10)
  numDocsIndexed Int       @map("num_docs_indexed")
  numNewDocs     Int       @map("num_new_docs")
  numDocsRemoved Int       @map("num_docs_removed")
  startTime      DateTime  @map("start_time") @db.Timestamp(6)
  endTime        DateTime? @map("end_time") @db.Timestamp(6)
  duration       Int?
  errorDetails   String?   @map("error_details") @db.VarChar
  sourceId       Int       @map("source_id")
  source         sources   @relation(fields: [sourceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("index_attempts")
}

model promptEvaluations {
  id           Int         @id @default(autoincrement())
  promptId     Int         @map("prompt_id")
  evaluationId Int         @map("evaluation_id")
  actualOutput String      @map("actual_output") @db.VarChar
  context      String?     @db.VarChar
  scores       Json?       @db.Json
  overallScore Float       @map("overall_score")
  evaluation   evaluations @relation(fields: [evaluationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prompt       prompts     @relation(fields: [promptId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("prompt_evaluations")
}

model prompts {
  id                Int                 @id @default(autoincrement())
  prompt            String              @db.VarChar
  expectedOutput    String?             @map("expected_output") @db.VarChar
  category          String              @db.VarChar
  comments          String?             @db.VarChar
  promptEvaluations promptEvaluations[]
}

model roles {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(5)
  userRoles userRoles[]
}

model sources {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar
  url                String               @db.VarChar
  refreshFrequency   String               @map("refresh_frequency") @db.VarChar(6)
  status             String               @db.VarChar(10)
  type               String               @db.VarChar(15)
  config             Json?                @db.Json
  lastUpdated        DateTime?            @map("last_updated") @db.Timestamp(6)
  lastFailed         DateTime?            @map("last_failed") @db.Timestamp(6)
  failureCount       Int                  @map("failure_count")
  collectionsSources collectionsSources[]
  documents          documents[]
  indexAttempts      indexAttempts[]

  @@index([refreshFrequency, status, lastUpdated], map: "ix_source_refresh_status_last_updated")
}

model userRoles {
  userId Int   @map("user_id")
  roleId Int   @map("role_id")
  role   roles @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user   users @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, roleId])
  @@map("user_roles")
}

model users {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar
  email        String      @db.VarChar
  kerberos     String?     @db.VarChar(20)
  iam          String?     @db.VarChar(10)
  msUserId     String?     @map("ms_user_id") @db.VarChar
  titles       String?     @db.VarChar
  affiliations String?     @db.VarChar
  departments  String?     @db.VarChar
  upn          String      @unique(map: "ix_users_upn") @db.VarChar
  chats        chats[]
  userRoles    userRoles[]

  @@index([email], map: "ix_users_email")
  @@index([kerberos], map: "ix_users_kerberos")
  @@index([name], map: "ix_users_name")
}
