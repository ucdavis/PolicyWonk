'use client';
import React from 'react';

import { nanoid } from 'ai';
import { useChat } from 'ai/react';
import { useAIState, useUIState } from 'ai/rsc';
import { useRouter } from 'next/navigation';

import { AI } from '@/lib/actions';
import { ChatSession } from '@/models/chat';
import { saveChat } from '@/services/historyService';

import Disclaimer from '../layout/disclaimer';
import WonkBottom from '../layout/wonkBottom';
import WonkTop from '../layout/wonkTop';

import ChatBoxForm from './chatBoxForm';
import ChatHeader from './chatHeader';
import DefaultQuestions from './defaultQuestions';

type MainContentProps = {
  chat: ChatSession | undefined;
};

const MainContent = ({ chat }: MainContentProps) => {
  const router = useRouter();

  // for when we want the chat history to refresh
  const [aiState] = useAIState<typeof AI>();
  const [messagesUI, setMessagesUI] = useUIState<typeof AI>();

  const chatId = React.useMemo(() => nanoid(), []);

  const { messages, setMessages, reload, append, isLoading } = useChat({
    api: '/api/chat',
    id: chatId,
  });

  // if previous chat is provided, set messages
  React.useEffect(() => {
    if (chat) {
      setMessages(chat.messages);
    }
  }, [chat, setMessages]);

  React.useEffect(() => {
    const messagesLength = aiState.messages?.length;
    if (messagesLength === 2) {
      router.refresh();
    }
  }, [aiState.messages, router]);

  // save chat to history when chat is complete
  React.useEffect(() => {
    const onChatComplete = async () => {
      const relevantMessages = messages.filter(
        (m) => m.role === 'assistant' || m.role === 'user'
      );

      await saveChat(chatId, relevantMessages);
      router.push(`/chat/${chatId}`);
      router.refresh();
    };

    if (!isLoading && messages.length > 2) {
      onChatComplete();
    }
  }, [messages, isLoading, chatId, router]);

  // const onQuestionSubmitted = async (question: string) => {
  //   if (messages.length === 0) {
  //     const newMessages = await getChatMessages(question);
  //     setMessages(newMessages);
  //     reload();
  //   } else {
  //     append({
  //       role: 'user',
  //       content: question,
  //     });
  //   }
  // };

  const onNewMessage = () => {
    router.push('/new');
  };

  return (
    <div className='wonk-container'>
      {!messagesUI.length ? (
        <>
          <WonkTop>
            <ChatHeader />
          </WonkTop>
          <WonkBottom>
            <DefaultQuestions />
            <ChatBoxForm />
            <Disclaimer />
          </WonkBottom>
        </>
      ) : (
        <>
          <WonkTop>
            {messagesUI // this is a list of actual React Nodes
              // as generated by our server action submitUserMessage in actions.tsx
              .map((m) => {
                return <div key={m.id}>{m.display}</div>;
              })}
          </WonkTop>
          <WonkBottom>
            <div className='d-flex flex-column'>
              <button
                className='btn btn-primary mt-3 mb-3'
                onClick={() => {
                  onNewMessage();
                }}
                aria-label='Ask another question'
              >
                Ask another question
              </button>
            </div>
          </WonkBottom>
        </>
      )}
    </div>
  );
};

export default MainContent;
